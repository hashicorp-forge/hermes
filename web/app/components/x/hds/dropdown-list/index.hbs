{{!
  Marked up with guidance from:
  https://www.w3.org/WAI/ARIA/apg/patterns/combobox/examples/combobox-select-only/
  https://www.w3.org/WAI/ARIA/apg/patterns/combobox/examples/combobox-autocomplete-list/
  https://www.w3.org/WAI/ARIA/apg/patterns/menu-button/examples/menu-button-links/
  https://www.w3.org/WAI/ARIA/apg/patterns/menu-button/examples/menu-button-actions-active-descendant/
}}

<FloatingUI
  @renderOut={{true}}
  @placement={{@placement}}
  class="hermes-popover"
>
  <:anchor as |f|>
    {{yield
      (hash
        ToggleButton=(component
          "x/hds/dropdown-list/toggle-button"
          contentIsShown=f.contentIsShown
          registerAnchor=f.registerAnchor
          toggleContent=f.toggleContent
          onTriggerKeydown=(fn this.onTriggerKeydown f)
          color=(or @color "secondary")
          disabled=@disabled
          ariaControls=(concat
            "x-hds-dropdown-list-"
            (if this.inputIsShown "container" "list")
            "-"
            f.id
          )
          text=@label
        )
        ToggleAction=(component
          "x/hds/dropdown-list/toggle-action"
          registerAnchor=f.registerAnchor
          onTriggerKeydown=(fn this.onTriggerKeydown f)
          toggleContent=f.toggleContent
          disabled=@disabled
          ariaControls=(concat
            "x-hds-dropdown-list-"
            (if this.inputIsShown "container" "list")
            "-"
            f.id
          )
        )
        contentIsShown=f.contentIsShown
      )
      to="anchor"
    }}
  </:anchor>
  <:content as |f|>
    <div
      id="x-hds-dropdown-list-container-{{f.id}}"
      class="x-hds-dropdown-list-container"
      role={{if this.inputIsShown "combobox"}}
      {{did-insert (fn this.didInsertList f)}}
      {{will-destroy this.willDestroyDropdown}}
      {{dismissible dismiss=f.hideContent related=f.anchor}}
      ...attributes
    >
      {{#if this.inputIsShown}}
        <div class="x-hds-dropdown-list-input-container">
          <Hds::Form::TextInput::Base
            data-test-product-area-dropdown-input
            {{did-insert this.registerAndFocusInput}}
            {{on "input" (perform this.onInput f)}}
            {{on "focusin" this.resetFocusedItemIndex}}
            @value={{this.query}}
            @type="search"
            placeholder="Filter..."
            {{! TODO: make this more specific }}
            aria-controls="x-hds-dropdown"
            aria-activedescendant={{unless
              (eq this.focusedItemIndex -1)
              (concat "x-hds-dropdown-list-item-" this.focusedItemIndex)
            }}
          />
        </div>
      {{/if}}
      <div
        {{did-insert this.registerScrollContainer}}
        class="x-hds-dropdown-list-scroll-container"
      >
        {{! So the problem is we want the flexibility to use LinkTos or Actions,
        each perhaps with its own unique requirements. Need to find some way of yielding the list item with a quick way of tagging the interactive component with stuff }}
        <X::Hds::DropdownList::Items
          @items={{@items}}
          @id={{f.id}}
          @onInput={{perform this.onInput f}}
          @onItemClick={{@onItemClick}}
          @listItemRole={{this.listItemRole}}
          @resetFocusedItemIndex={{this.resetFocusedItemIndex}}
          @registerScrollContainer={{this.registerScrollContainer}}
          @listIsOrdered={{@listIsOrdered}}
          @inputIsShown={{this.inputIsShown}}
          @setFocusedItemIndex={{this.setFocusedItemIndex}}
          @focusedItemIndex={{this.focusedItemIndex}}
          @shownItems={{this.shownItems}}
          @selected={{@selected}}
          @query={{this.query}}
          @f={{f}}
        >
          <:item as |i|>
            {{yield i to="item"}}
          </:item>
        </X::Hds::DropdownList::Items>

      </div>
      {{! action list }}
      {{! link list }}
    </div>
  </:content>
</FloatingUI>
